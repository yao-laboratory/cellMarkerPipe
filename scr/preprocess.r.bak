library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)

args <- commandArgs(trailingOnly = TRUE)

## start a project dir
work.dir = args[1]
data.dir = args[2]
if.cluster = args[3]

print(args[4])
if(length(args) < 4){
	n.PCA = 10 } else{
	n.PCA = strtoi(args[4]) }

print(work.dir)
print(data.dir)
print(if.cluster)
print(n.PCA)
#"/work/yaolab/yinglu/project/selection/seurat"

# here we use data treated with 10X, barcodes.tsv  genes.tsv  matrix.mtx
# here the pbmc.data is a sparse matrix of saving gene*cell
pbmc.data <- Read10X(data.dir = data.dir)
# Initialize the Seurat project object with the raw (non-normalized data).
# here the count matrix is save as pbmc@assays$RNA@counts
# the min # of cell and min # of features are also defined here
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)

# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")

pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

# A-> ln(A/total_counts*scale.factor+1)
# the normalized data is saved in slot data (pbmc@assays$RNA@data) as a spase matrix
# or Normalized values are stored in pbmc[["RNA"]]@data
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)

## save the normalized matrix and output to file
dir.create(file.path(work.dir, "data"))
#saveRDS(pbmc[["RNA"]]@data, file = file.path(work.dir, "data/norm_data.rds"))

#Scale the data
#Shifts the expression of each gene, so that the mean expression across cells is 0
#Scales the expression of each gene, so that the variance across cells is 1
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)


#mat <- pbmc[["RNA"]]@data
#write.csv(mat,file = file.path(work.dir, "data/norm_data.csv")) # keeps the rownames
mat <- GetAssayData(object = pbmc, slot = 'scale.data')
head(mat)
write.table(mat,file = file.path(work.dir, "data/norm_data.csv"),sep="\t") # keeps the rownames

#saveRDS(pbmc, file = file.path(work.dir, "data/pbmc3k_small.rds"))

#high cell-to-cell variation
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# dimensional reduction like PCA
# if this step takes too long,use ScaleData(pbmc), only scale on high variable features
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
# PCA
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Visualize top genes associated with PCAs
plot_dim_reduction <- VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
ggsave(file.path(cluster.dir, "top_genes_of_PCA.png"), plot_dim_reduction, width = 15, height = 10)
# Determine the dimension of PCA used for cluster 
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
#a ranking of principle components based on the percentage of variance explained by each one
# choosing the features before elbows
plot_elbow <- ElbowPlot(pbmc)
ggsave(file.path(cluster.dir, "elbow_rank_PCA.png"), plot_elbow, width = 15, height = 10)

# cluster with KNN
if(if.cluster){
# make a directory to save cluster files
	cluster.dir <- file.path(work.dir, "cluster/")
	dir.create(cluster.dir)
# number of PCA should be determined based on the elbow plots, defalting value is 10
# KNN graph

	pbmc <- FindNeighbors(pbmc, dims = 1:n.PCA)
	pbmc <- FindClusters(pbmc, resolution = 0.5)
# visualize cluster using UMAP
	pbmc <- RunUMAP(pbmc, dims = 1:n.PCA)
	plot_UMAP <- DimPlot(pbmc, reduction = "umap")
	ggsave(file.path(cluster.dir, "UMAP.png"), plot_UMAP, width = 15, height = 10)

# export cluster result and UMAP axis
# save cluster name for each cell
	#write.csv(pbmc@ meta.data$ seurat_clusters,file = file.path(cluster.dir, "pbmc3k_cluster_labels.csv"), sep="\t", col.names=FALSE) # keeps the rownames
	write.table(pbmc[['seurat_clusters']],file = file.path(cluster.dir, "tabcluster.csv"), sep="\t", col.names=FALSE) # keeps the rownames
#	write.csv(pbmc@ active.ident,file = file.path(cluster.dir, "pbmc3k_cluster_names.csv"), sep="\t", col.names=FALSE) # keeps the rownames
	write.table(pbmc@ active.ident,file = file.path(cluster.dir, "tabnames.csv"), sep="\t", col.names=FALSE) # keeps the rownames
	# save UMAP embedding for plotting
	vis_data <- Embeddings(pbmc, reduction = "umap")
	write.table(vis_data, file.path(cluster.dir, "tabvis.txt"), sep="\t", col.names=FALSE)
	# save Seurat project
#	saveRDS(pbmc, file =file.path(work.dir, "data/pbmc3k_cluster.rds"))
}
